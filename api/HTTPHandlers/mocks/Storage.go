// Code generated by mockery v1.0.0
package mocks

import context "context"
import entity "github.com/8tomat8/yetAnotherCRUD/entity"
import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Storage) Create(_a0 context.Context, _a1 *entity.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Storage) Delete(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, username, sex, age
func (_m *Storage) Search(ctx context.Context, username *string, sex *string, age *int) ([]entity.User, error) {
	ret := _m.Called(ctx, username, sex, age)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string, *int) []entity.User); ok {
		r0 = rf(ctx, username, sex, age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string, *int) error); ok {
		r1 = rf(ctx, username, sex, age)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Storage) Update(_a0 context.Context, _a1 *entity.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
